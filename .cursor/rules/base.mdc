---
description: 
globs: 
alwaysApply: false
---
---
description: "Reglas de arquitectura para separación por features y uso correcto de shared/lib"
globs: ["app/features/**", "app/shared/**", "lib/**", "shared/lib/**", "**/*.js", "middleware.js"]
alwaysApply: true
---

## 📁 app/features/*

Cada feature debe estar completamente aislada y contener su propio dominio.

- Agrupar componentes, hooks, api-calls y validaciones por feature.
- Evitar importar lógica entre features. Usar `shared/lib` solo si es estrictamente genérico.
- Si se necesita compartir algo entre features, moverlo explícitamente a `shared`.

---

## 📁 app/shared/*

El código compartido debe ser atómico y sin dependencias de dominio.

- No incluir lógica de negocio en `shared`.
- Evitar acoplamiento a features o a datos de negocio.
- Organizar en subcarpetas como `ui`, `lib`, `hooks`, `schema`, etc.

---

## 📁 lib/* o shared/lib/*

Utilidades puras, validaciones y abstracciones comunes.

- Funciones puras, sin efectos secundarios.
- Ideal para funciones de fetch, formateo, validación, etc.
- Validaciones con Zod deben estar acá si son globales.

---

## 📄 *.js

Reglas generales para mantener clean code y principios SOLID en JavaScript.

- No exceder 200 líneas por archivo.
- Funciones de máximo 30-40 líneas.
- Preferir composición antes que herencia.
- Usar `use` prefix en hooks (`useSomething`).
- Evitar código muerto y `console.log`s innecesarios.
- Mantener separación clara de responsabilidades (SRP).

---

## 📄 middleware.js

Middleware debe ser simple, rápido y reutilizable.

- Evitar lógica pesada.
- Validaciones mínimas para redirección o auth.
- Extraer funciones auxiliares a `lib` si crecen.
